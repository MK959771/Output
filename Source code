 !pip install gradio scikit-learn pandas --quiet
 import pandas as pd

# Load dataset
df = pd.read_csv("/content/financial_behavior_dataset.csv")

# Drop rows with missing target
df.dropna(subset=['financial_behavior'], inplace=True)

# Show dataset summary
print("Columns:", df.columns.tolist())
df.head()
 from sklearn.preprocessing import LabelEncoder

# Target
y = df['financial_behavior']

# Drop unused text fields (you can include sentiment_score and stats)
X = df.drop(columns=['financial_behavior', 'tweet_content'])

# Encode categorical features
X_encoded = pd.get_dummies(X, drop_first=True)

# Encode target
le = LabelEncoder()
y_encoded = le.fit_transform(y)
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

X_train, X_test, y_train, y_test = train_test_split(X_encoded, y_encoded, test_size=0.2, random_state=42)

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Evaluate
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred, target_names=le.classes_))
import gradio as gr
 
input_columns = X_encoded.columns

def predict_behavior(**inputs):
    import pandas as pd
    input_df = pd.DataFrame([inputs])
    input_encoded = pd.get_dummies(input_df)
    input_encoded = input_encoded.reindex(columns=input_columns, fill_value=0)
    prediction = model.predict(input_encoded)[0]
    return le.inverse_transform([prediction])[0]

# Build Gradio interface
input_components = []
for col in X.columns:
    if X[col].dtype == 'object':
        options = sorted(df[col].dropna().unique().tolist())
        input_components.append(gr.Dropdown(choices=options, label=col))
    else:
        input_components.append(gr.Number(label=col))

gr.Interface(
    fn=predict_behavior,
    inputs=input_components,
    outputs=gr.Label(),
    title="ðŸ’¸ Financial Behavior Classifier",
    description="Predicts financial behavior type based on social media content features."
).launch(share=True)
